#!/usr/bin/env bash

# Super Prompt MCP launcher
# - Spawns the Python MCP server (stdio)
# - Uses system Python interpreter (env PYTHON override supported)
# - Writes logs to stderr only; stdout is reserved for MCP protocol

# Find the root of the super-prompt installation package.
# Use the script's own path instead of $0 to avoid issues with bash -c
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_HOME="$(dirname "$SCRIPT_DIR")"
export APP_HOME

# Find the project root (git root or current directory).
resolve_project_root() {
  if command -v git &>/dev/null; then
    local root
    root="$(git rev-parse --show-toplevel 2>/dev/null || true)"
    if [ -n "$root" ]; then
      printf "%s" "$root"
      return 0
    fi
  fi
  printf "%s" "$(pwd)"
}

PROJECT_ROOT="$(resolve_project_root)"

# Resolve Python interpreter
resolve_python() {
  if [ -n "${PYTHON:-}" ] && command -v "$PYTHON" >/dev/null 2>&1; then
    printf "%s" "$PYTHON"
    return 0
  fi
  for candidate in python3.13 python3.12 python3.11 python3.10 python3 python; do
    if command -v "$candidate" >/dev/null 2>&1; then
      printf "%s" "$candidate"
      return 0
    fi
  done
  echo "-------- ERROR: No Python interpreter found (set PYTHON env)" >&2
  return 1
}

PYTHON_BIN="$(resolve_python)"
echo "-------- MCP: Python found: $PYTHON_BIN" >&2

# Set environment variables
export MCP_SERVER_MODE="1"
export SUPER_PROMPT_PROJECT_ROOT="$PROJECT_ROOT"
export SUPER_PROMPT_PACKAGE_ROOT="$APP_HOME"
export PYTHONPATH="$APP_HOME/packages/core-py:${PYTHONPATH:-}"
export PYTHONUNBUFFERED="1"
export PYTHONUTF8="1"

# Launch MCP server via module path

# Execute MCP server with proper stdio handling
echo "-------- MCP: Executing Python module" >&2
echo "-------- MCP: PYTHONPATH: $APP_HOME/packages/core-py" >&2
echo "-------- MCP: Python binary: $PYTHON_BIN" >&2
echo "-------- MCP: App home: $APP_HOME" >&2

PYTHONPATH="$APP_HOME/packages/core-py" "$PYTHON_BIN" -m super_prompt.mcp_stdio
