#!/usr/bin/env node
'use strict';

// Super Prompt MCP launcher
// - Spawns the Python MCP server (stdio)
// - Uses system Python interpreter (env PYTHON override supported)
// - Writes logs to stderr only; stdout is reserved for MCP protocol

const { spawn, spawnSync } = require('child_process');
const path = require('path');
const fs = require('fs');

function resolveProjectRoot() {
  // Prefer workspace folder passed by Cursor (PWD), fallback to git root, then cwd
  const cwd = process.cwd();
  try {
    // If .git exists somewhere up the tree, use it as project root
    let dir = cwd;
    // Stop at filesystem root
    while (true) {
      if (fs.existsSync(path.join(dir, '.git'))) return dir;
      const parent = path.dirname(dir);
      if (parent === dir) break;
      dir = parent;
    }
  } catch (_) {}
  return cwd;
}

function resolvePackageRoot() {
  // Package root = parent of bin/
  return path.join(__dirname, '..');
}

function resolvePython() {
  const candidates = [];
  if (process.env.PYTHON) candidates.push(process.env.PYTHON);
  if (process.platform === 'win32') {
    candidates.push('python');
    candidates.push('py');
  } else {
    candidates.push('python3.12');
    candidates.push('python3.11');
    candidates.push('python3.10');
    candidates.push('python3');
    candidates.push('python');
  }

  for (const cmd of candidates) {
    try {
      const result = spawnSync(cmd, ['--version'], { stdio: 'ignore' });
      if (result.status === 0) return cmd;
    } catch (_) {
      // continue
    }
  }

  return process.platform === 'win32' ? 'python' : 'python3';
}

// Legacy server checking removed - using stateless approach

function main() {
  const projectRoot = process.env.SUPER_PROMPT_PROJECT_ROOT || resolveProjectRoot();
  const packageRoot = process.env.SUPER_PROMPT_PACKAGE_ROOT || resolvePackageRoot();

  // Resolve interpreter once per invocation
  const py = resolvePython();

  const env = {
    ...process.env,
    MCP_SERVER_MODE: '1',
    SUPER_PROMPT_PROJECT_ROOT: projectRoot,
    SUPER_PROMPT_PACKAGE_ROOT: packageRoot,
    // Ensure Python can import our bundled core package during dev/local usage
    PYTHONPATH: [
      path.join(packageRoot, 'packages', 'core-py'),
      process.env.PYTHONPATH || ''
    ].filter(Boolean).join(':'),
    PYTHONUNBUFFERED: '1',
    PYTHONUTF8: '1',
  };

  // Launch MCP server via module path
  const args = ['-m', 'super_prompt.mcp_stdio'];

  const proc = spawn(py, args, {
    env,
    stdio: ['inherit', 'inherit', 'inherit'], // stdout carries protocol; server logs must use stderr
  });

  proc.on('exit', (code, signal) => {
    if (signal) {
      process.exit(1);
      return;
    }
    process.exit(code == null ? 1 : code);
  });
}

main();
