#!/usr/bin/env bash
# Minimal tag-first wrapper for Codex/CLI usage
# Allows: sp --sp-analyzer "..." (no super-prompt command necessary)
set -euo pipefail

resolve_app_home() {
  local PRG="$0"
  while [ -h "$PRG" ]; do
    ls_output=$(ls -ld "$PRG")
    link=$(expr "$ls_output" : '.*-> \(.*\)$')
    if expr "$link" : '/.*' >/dev/null; then
      PRG="$link"
    else
      PRG="$(dirname "$PRG")/$link"
    fi
  done
  local SAVED="$(pwd)"
  cd "$(dirname "$PRG")/.." >/dev/null
  local HOME_DIR="$(pwd -P)"
  cd "$SAVED" >/dev/null
  printf "%s" "$HOME_DIR"
}

APP_HOME="$(resolve_app_home)"

detect_sp_persona() {
  local slug=""; local i
  for i in "$@"; do
    case "$i" in
      --sp-*) slug="${i#--sp-}"; break ;;
    esac
  done
  [ -n "$slug" ] && printf "%s" "$slug" || return 1
}

handle_mode_toggle_flags() {
  local PROJECT_ROOT="$(pwd)"
  local i
  for i in "$@"; do
    case "$i" in
      --sp-grok-mode-on|--grok-mode-on)
        mkdir -p "$PROJECT_ROOT/.cursor" 2>/dev/null || true
        : > "$PROJECT_ROOT/.cursor/.grok-mode"
        if [ -f "$PROJECT_ROOT/.cursor/.codex-mode" ]; then
          rm -f "$PROJECT_ROOT/.cursor/.codex-mode" 2>/dev/null || true
          echo "-------- Disabled Codex AMR mode due to Grok activation" >&2
        fi
        echo "-------- Grok mode: ENABLED (.cursor/.grok-mode)" >&2
        exit 0 ;;
      --sp-grok-mode-off|--grok-mode-off)
        if [ -f "$PROJECT_ROOT/.cursor/.grok-mode" ]; then
          rm -f "$PROJECT_ROOT/.cursor/.grok-mode" 2>/dev/null || true
          echo "-------- Grok mode: DISABLED" >&2
        else
          echo "-------- Grok mode: Already disabled" >&2
        fi
        exit 0 ;;
      --sp-codex-mode-on|--codex-mode-on|--sp-codec-mode-on)
        mkdir -p "$PROJECT_ROOT/.cursor" 2>/dev/null || true
        : > "$PROJECT_ROOT/.cursor/.codex-mode"
        if [ -f "$PROJECT_ROOT/.cursor/.grok-mode" ]; then
          rm -f "$PROJECT_ROOT/.cursor/.grok-mode" 2>/dev/null || true
          echo "-------- Disabled Grok mode due to Codex AMR activation" >&2
        fi
        echo "-------- Codex AMR mode: ENABLED (.cursor/.codex-mode)" >&2
        exit 0 ;;
      --sp-codex-mode-off|--codex-mode-off|--sp-codec-mode-off)
        if [ -f "$PROJECT_ROOT/.cursor/.codex-mode" ]; then
          rm -f "$PROJECT_ROOT/.cursor/.codex-mode" 2>/dev/null || true
          echo "-------- Codex AMR mode: DISABLED" >&2
        else
          echo "-------- Codex AMR mode: Already disabled" >&2
        fi
        exit 0 ;;
    esac
  done
}

handle_mode_toggle_flags "$@"

filter_user_input() {
  # Drop tokens that look like flags or slash tags; keep user text only
  for tok in "$@"; do
    case "$tok" in
      --sp-*) ;; --*) ;; -*) ;; /*) ;;
      *) printf "%s " "$tok";;
    esac
  done | sed 's/[ ]*$//'
}

if persona_slug="$(detect_sp_persona "$@" 2>/dev/null)"; then
  USER_INPUT="$(filter_user_input "$@")"

  # Prefer project-local enhanced processor; fallback to packaged copy
  PROJECT_ROOT=$(pwd)
  # Inject mode envs from flag files (mutually exclusive)
  if [ -f "$PROJECT_ROOT/.cursor/.codex-mode" ]; then
    export SP_CODEX_MODE=1
    unset SP_GROK_MODE || true
  elif [ -f "$PROJECT_ROOT/.cursor/.grok-mode" ]; then
    export SP_GROK_MODE=1
    unset SP_CODEX_MODE || true
  fi
  PROCESSOR_PATH="$PROJECT_ROOT/.super-prompt/utils/cursor-processors/enhanced_persona_processor.py"
  if [ ! -f "$PROCESSOR_PATH" ]; then
    PROCESSOR_PATH="$APP_HOME/.super-prompt/utils/cursor-processors/enhanced_persona_processor.py"
  fi
  if [ ! -f "$PROCESSOR_PATH" ]; then
    echo "-------- ERROR: Enhanced persona processor not found" >&2
    exit 1
  fi

  # Ensure PyYAML for the processor
  python3 - <<'PY' >/dev/null 2>&1 || true
import sys, subprocess
try:
    import yaml  # type: ignore
except Exception:
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyyaml>=6.0'], check=False)
    except Exception:
        pass
PY

  exec python3 "$PROCESSOR_PATH" --persona "$persona_slug" $USER_INPUT
fi

# No persona flag: delegate to packaged Python CLI optimize path
CLI_PY="$APP_HOME/.super-prompt/cli.py"
if [ -f "$CLI_PY" ]; then
  exec python3 "$CLI_PY" optimize "$@"
fi

# Last resort: super-prompt if available; else npx
if command -v super-prompt >/dev/null 2>&1; then
  exec super-prompt optimize "$@"
else
  exec npx @cdw0424/super-prompt optimize "$@"
fi
