#!/usr/bin/env bash
# Super Prompt CLI Wrapper — robust, self-healing
set -euo pipefail

# Route 'codex-amr' subcommand to Node CLI without affecting legacy behavior
if [ "${1-}" = "codex-amr" ]; then
  shift
  if command -v node >/dev/null 2>&1; then
    exec node "$(dirname "$0")/codex-amr.js" "$@"
  else
    echo "-------- Node.js is required for codex-amr commands" >&2
    exit 1
  fi
fi

# Map legacy alias 'super:init' → core CLI 'init'
if [ "${1-}" = "super:init" ]; then
  shift
  set -- init "$@"
fi

resolve_app_home() {
  local PRG="$0"
  while [ -h "$PRG" ]; do
    ls_output=$(ls -ld "$PRG")
    link=$(expr "$ls_output" : '.*-> \(.*\)$')
    if expr "$link" : '/.*' >/dev/null; then
      PRG="$link"
    else
      PRG="$(dirname "$PRG")/$link"
    fi
  done
  local SAVED="$(pwd)"
  cd "$(dirname "$PRG")/.." >/dev/null
  local HOME_DIR="$(pwd -P)"
  cd "$SAVED" >/dev/null
  printf "%s" "$HOME_DIR"
}

APP_HOME="$(resolve_app_home)"

# Resolve project root (prefer git toplevel; fallback to CWD)
resolve_project_root() {
  if command -v git >/dev/null 2>&1; then
    if GIT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null); then
      printf "%s" "$GIT_ROOT"
      return 0
    fi
  fi
  printf "%s" "$(pwd)"
}

PROJECT_ROOT="$(resolve_project_root)"

# Detect persona flags: --sp-<persona>
detect_sp_persona() {
  local slug=""; local i
  for i in "$@"; do
    case "$i" in
      --sp-*) slug="${i#--sp-}"; break ;;
    esac
  done
  [ -n "$slug" ] && printf "%s" "$slug" || return 1
}

# If persona flag present, route directly to enhanced persona processor
if persona_slug="$(detect_sp_persona "$@" 2>/dev/null)"; then
  # Filter user input: tokens not starting with '--', '-', or '/'
  USER_INPUT=""
  for tok in "$@"; do
    case "$tok" in
      --sp-*) ;; # drop persona flag
      --*) ;;    # drop other flags
      -*) ;;     # drop short flags
      /*) ;;     # drop slash tags
      *) USER_INPUT+="$tok ";;
    esac
  done
  USER_INPUT="${USER_INPUT%% }"

  # Resolve processor path (prefer project, fallback to package)
  PROCESSOR_PATH="$PROJECT_ROOT/.super-prompt/utils/cursor-processors/enhanced_persona_processor.py"
  if [ ! -f "$PROCESSOR_PATH" ]; then
    PROCESSOR_PATH="$APP_HOME/.super-prompt/utils/cursor-processors/enhanced_persona_processor.py"
  fi
  if [ ! -f "$PROCESSOR_PATH" ]; then
    echo "-------- ERROR: Enhanced persona processor not found" >&2
    exit 1
  fi

  exec python3 "$PROCESSOR_PATH" --persona "$persona_slug" $USER_INPUT
fi

# Determine which Python CLI to run (project-local preferred)
resolve_cli_script() {
  local project_cli="$PROJECT_ROOT/.super-prompt/cli.py"
  local packaged_cli="$APP_HOME/.super-prompt/cli.py"

  if [ -f "$project_cli" ]; then
    echo "-------- Using project Python core: $project_cli" >&2
    printf "%s" "$project_cli"
    return 0
  fi

  if [ -f "$packaged_cli" ]; then
    echo "-------- Using packaged Python core: $packaged_cli" >&2
    printf "%s" "$packaged_cli"
    return 0
  fi

  printf "%s" ""
  return 1
}

CLI_SCRIPT="$(resolve_cli_script || true)"

# Opportunistic project bootstrap: ensure .super-prompt exists on init
maybe_bootstrap_super_prompt() {
  # Non-destructive bootstrap: if missing locally, copy bundled assets
  if [ ! -d ".super-prompt" ] && [ -d "${APP_HOME}/.super-prompt" ]; then
    echo "-------- Installing project .super-prompt utilities"
    cp -R "${APP_HOME}/.super-prompt" ".super-prompt" 2>/dev/null || true
    # Best-effort: ensure python files are executable
    if command -v find >/dev/null 2>&1; then
      find .super-prompt -type f -name "*.py" -exec chmod 755 {} + 2>/dev/null || true
    fi
  fi
}

ensure_codex_latest() {
  if [ "${SP_SKIP_CODEX_UPGRADE:-0}" = "1" ]; then return 0; fi
  if command -v npm >/dev/null 2>&1; then
    echo "-------- Upgrading Codex CLI to latest (@openai/codex)"
    npm install -g @openai/codex@latest >/dev/null 2>&1 || true
  fi
}

ensure_self_latest() {
  # Opt-in self-update to avoid accidental downgrade
  if [ "${SP_SELF_UPDATE:-0}" != "1" ]; then
    # honor legacy skip flag too
    return 0
  fi
  if command -v npm >/dev/null 2>&1; then
    echo "-------- Checking Super Prompt updates (@cdw0424/super-prompt)"
    npm install -g @cdw0424/super-prompt@latest >/dev/null 2>&1 || true
  fi
}

ensure_cli() {
  if [ -n "${CLI_SCRIPT:-}" ] && [ -f "$CLI_SCRIPT" ]; then return 0; fi
  if [ -f "${APP_HOME}/install.js" ] && command -v node >/dev/null 2>&1; then
    echo "-------- Finalizing installation (running postinstall)"
    (cd "$APP_HOME" && node install.js) || true
  fi
  # Re-resolve after potential install
  CLI_SCRIPT="$(resolve_cli_script || true)"
  [ -n "${CLI_SCRIPT:-}" ] && [ -f "$CLI_SCRIPT" ]
}

ensure_self_latest
ensure_codex_latest

# Pre-flight: ensure required Python libs are available for CLI import
python3 - <<'PY' >/dev/null 2>&1 || true
import sys, subprocess
try:
    import typer, yaml, rich, pathspec, pydantic  # type: ignore
except Exception:
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'typer>=0.9.0', 'pyyaml>=6.0', 'rich>=13.0.0', 'pathspec>=0.11.0', 'pydantic>=2.0.0'], check=False)
    except Exception:
        pass
PY

if ! ensure_cli; then
  echo "❌ Python CLI not found. Expected at one of:"
  echo "   - $PROJECT_ROOT/.super-prompt/cli.py"
  echo "   - $APP_HOME/.super-prompt/cli.py"
  echo "-------- Remediation:"
  echo "   - npm config set ignore-scripts false"
  echo "   - npm rebuild -g @cdw0424/super-prompt"
  echo "   - or run: node '${APP_HOME}/install.js'"
  echo "   - or ensure your repo includes '.super-prompt/cli.py'"
  exit 1
fi

# Perform bootstrap if needed (non-destructive), for any command
maybe_bootstrap_super_prompt

# Check Python version
python3 - <<'PY' || { echo "❌ Python 3.7+ required"; exit 1; }
import sys
req=(3,7)
sys.exit(0 if sys.version_info>=req else 1)
PY

exec python3 "$CLI_SCRIPT" "$@"
